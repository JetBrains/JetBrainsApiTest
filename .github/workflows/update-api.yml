name: Update API
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Override API version'
        required: false
        default: ''
        type: string
permissions:
  contents: write
  pages: write
  id-token: write
concurrency:
  group: update-api
  cancel-in-progress: false
jobs:
  update-api:
    if: github.event.pusher.email != vars.PUSH_EMAIL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2
        with:
          token: ${{secrets.ACCESS_TOKEN}}
      - name: Setup Java JDK
#         uses: actions/setup-java@v3.9.0
#         with:
#           distribution: oracle
#           java-version: 20
        uses: oracle-actions/setup-java@b9d8cf728e941b3ce91823c84cb792e7602e4687
      - name: Build
        id: build
        run: |
          bash tools/build.sh ${{ inputs.version != '' && inputs.version || 'full' }}
          MESSAGE="`cat out/message.txt`"
          if [ "x$MESSAGE" = "x" ] ; then
            echo "Seems like there are no changes in jetbrains.api."
            exit 0
          fi
          API_VERSION="`cat out/version.txt`"
          echo "API version: $API_VERSION"
          [[ "$API_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] || {
            echo "API version looks incorrect."
            exit 1
          }
          API_DIFF=${MESSAGE#*\`\`\`}
          API_DIFF=${API_DIFF%\`\`\`*}
          [[ "$MESSAGE" = "$API_DIFF" ]] && API_DIFF=""
          \cp out/api-blob .
          echo "API_VERSION=$API_VERSION" >> "$GITHUB_OUTPUT"
          echo "API_DIFF=$API_DIFF" >> "$GITHUB_OUTPUT"
          echo "SUCCESS=true" >> "$GITHUB_OUTPUT"
      - name: Commit update
        if: ${{steps.build.outputs.SUCCESS}}
        run: |
          EXIT_CODE=0
          git fetch origin +refs/tags/v${{steps.build.outputs.API_VERSION}}:refs/tags/v${{steps.build.outputs.API_VERSION}}
          git add api-blob
          git config --global user.name 'JBR API'
          git config --global user.email '${{vars.PUSH_EMAIL}}'
          set +e
          git commit -m "v${{steps.build.outputs.API_VERSION}}" -m "${{steps.build.outputs.API_DIFF}}" || EXIT_CODE=1
          git tag -a "v${{steps.build.outputs.API_VERSION}}" -m "v${{steps.build.outputs.API_VERSION}}" -m "${{steps.build.outputs.API_DIFF}}" || EXIT_CODE=1
          set -e
          git push --tags
          exit $EXIT_CODE
      - name: Create release
        if: ${{steps.build.outputs.SUCCESS}}
        uses: actions/github-script@v6.4.1
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const jarName     = 'jbr-api-${{steps.build.outputs.API_VERSION}}.jar';
            const sourcesName = 'jbr-api-${{steps.build.outputs.API_VERSION}}-sources.jar';
            const javadocName = 'jbr-api-${{steps.build.outputs.API_VERSION}}-javadoc.jar';
            var fs = require('fs');
            var jar     = fs.readFileSync('out/' + jarName);
            var sources = fs.readFileSync('out/' + sourcesName);
            var javadoc = fs.readFileSync('out/' + javadocName);
            const response = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'v${{steps.build.outputs.API_VERSION}}',
              tag_name: 'v${{steps.build.outputs.API_VERSION}}',
              body: '${{steps.build.outputs.API_DIFF}}',
              draft: false,
              prerelease: false,
              generate_release_notes: true,
            });
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              url: response.data.upload_url,
              headers: { "content-type": "application/java-archive" },
              name: jarName,
              data: jar,
            });
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              url: response.data.upload_url,
              headers: { "content-type": "application/java-archive" },
              name: sourcesName,
              data: sources,
            });
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              url: response.data.upload_url,
              headers: { "content-type": "application/java-archive" },
              name: javadocName,
              data: javadoc,
            });
      - name: Configure Pages
        if: always() && ${{steps.build.outputs.SUCCESS}}
        uses: actions/configure-pages@v3.0.6
      - name: Upload Javadoc Pages artifact
        if: always() && ${{steps.build.outputs.SUCCESS}}
        uses: actions/upload-pages-artifact@v1.0.8
        with:
          path: 'out/javadoc'
      - name: Deploy Javadoc to Pages
        if: always() && ${{steps.build.outputs.SUCCESS}}
        uses: actions/deploy-pages@v2.0.1
